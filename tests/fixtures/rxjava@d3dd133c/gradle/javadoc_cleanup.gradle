// remove the excessive whitespaces between method arguments in the javadocs
task javadocCleanup(dependsOn: "javadoc") doLast {
    fixJavadocFile(rootProject.file('build/docs/javadoc/io/reactivex/rxjava3/core/Flowable.html'));
    fixJavadocFile(rootProject.file('build/docs/javadoc/io/reactivex/rxjava3/core/Observable.html'));
    fixJavadocFile(rootProject.file('build/docs/javadoc/io/reactivex/rxjava3/core/Single.html'));
    fixJavadocFile(rootProject.file('build/docs/javadoc/io/reactivex/rxjava3/core/Maybe.html'));
    fixJavadocFile(rootProject.file('build/docs/javadoc/io/reactivex/rxjava3/core/Completable.html'));

    fixJavadocFile(rootProject.file('build/docs/javadoc/io/reactivex/rxjava3/flowables/ConnectableFlowable.html'));
    fixJavadocFile(rootProject.file('build/docs/javadoc/io/reactivex/rxjava3/observables/ConnectableObservable.html'));

    fixJavadocFile(rootProject.file('build/docs/javadoc/io/reactivex/rxjava3/subjects/ReplaySubject.html'));
    fixJavadocFile(rootProject.file('build/docs/javadoc/io/reactivex/rxjava3/processors/ReplayProcessor.html'));
    fixJavadocFile(rootProject.file('build/docs/javadoc/io/reactivex/rxjava3/plugins/RxJavaPlugins.html'));

    fixJavadocFile(rootProject.file('build/docs/javadoc/io/reactivex/rxjava3/parallel/ParallelFlowable.html'));
}

def fixJavadocFile(file) {
    println("Cleaning up: " + file);
    String fileContents = file.getText('UTF-8')

    // lots of spaces after the previous method argument
    fileContents = fileContents.replaceAll(",\\s{4,}", ",\n        ");

    // lots of spaces after the @NonNull annotations
    fileContents = fileContents.replaceAll("@NonNull</a>\\s{4,}", "@NonNull</a> ");

    // lots of spaces after the @Nullable annotations
    fileContents = fileContents.replaceAll("@Nullable</a>\\s{4,}", "@Nullable</a> ");

    file.setText(fileContents, 'UTF-8');
}

javadocJar.dependsOn javadocCleanup
build.dependsOn javadocCleanup 